{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"D:\\\\Users\\\\dell\\\\Downloads\\\\mern-apps\\\\virtualLaundry\\\\client\\\\node_modules\\\\expo-av\\\\build\\\\ExponentVideo.web.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport createElement from \"react-native-web/dist/exports/createElement\";\nimport ExponentAV from \"./ExponentAV\";\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nvar Video = React.forwardRef(function (props, ref) {\n  return createElement('video', _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref\n  }));\n});\n\nvar ExponentVideo = function (_React$Component) {\n  _inherits(ExponentVideo, _React$Component);\n\n  var _super = _createSuper(ExponentVideo);\n\n  function ExponentVideo() {\n    var _this;\n\n    _classCallCheck(this, ExponentVideo);\n\n    _this = _super.apply(this, arguments);\n\n    _this.onFullscreenChange = function (event) {\n      if (!_this.props.onFullscreenUpdate) return;\n\n      if (event.target === _this._video) {\n        if (document.fullscreenElement) {\n          _this.props.onFullscreenUpdate({\n            nativeEvent: {\n              fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_PRESENT\n            }\n          });\n        } else {\n          _this.props.onFullscreenUpdate({\n            nativeEvent: {\n              fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_DISMISS\n            }\n          });\n        }\n      }\n    };\n\n    _this.onStatusUpdate = function _callee() {\n      var nativeEvent;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.props.onStatusUpdate) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(ExponentAV.getStatusForVideo(_this._video));\n\n            case 4:\n              nativeEvent = _context.sent;\n\n              _this.props.onStatusUpdate({\n                nativeEvent: nativeEvent\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onLoadStart = function () {\n      if (!_this.props.onLoadStart) {\n        return;\n      }\n\n      _this.props.onLoadStart();\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onLoadedData = function (event) {\n      if (!_this.props.onLoad) {\n        return;\n      }\n\n      _this.props.onLoad(event);\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onError = function (event) {\n      if (!_this.props.onError) {\n        return;\n      }\n\n      _this.props.onError(event);\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onProgress = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onSeeking = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onEnded = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onLoadedMetadata = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onCanPlay = function (event) {\n      if (!_this.props.onReadyForDisplay) {\n        return;\n      }\n\n      _this.props.onReadyForDisplay(event);\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onStalled = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onRef = function (ref) {\n      _this._video = ref;\n\n      _this.onStatusUpdate();\n    };\n\n    return _this;\n  }\n\n  _createClass(ExponentVideo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var isIE11 = !!window['MSStream'];\n      document.addEventListener(isIE11 ? 'MSFullscreenChange' : 'fullscreenchange', this.onFullscreenChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var isIE11 = !!window['MSStream'];\n      document.addEventListener(isIE11 ? 'MSFullscreenChange' : 'fullscreenchange', this.onFullscreenChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          source = _this$props.source,\n          _this$props$status = _this$props.status,\n          status = _this$props$status === void 0 ? {} : _this$props$status,\n          objectFit = _this$props.resizeMode,\n          useNativeControls = _this$props.useNativeControls,\n          style = _this$props.style;\n      var customStyle = {\n        position: undefined,\n        objectFit: objectFit,\n        overflow: 'hidden'\n      };\n      return React.createElement(Video, {\n        ref: this.onRef,\n        onLoadStart: this.onLoadStart,\n        onLoadedData: this.onLoadedData,\n        onError: this.onError,\n        onTimeUpdate: this.onProgress,\n        onSeeking: this.onSeeking,\n        onEnded: this.onEnded,\n        onLoadedMetadata: this.onLoadedMetadata,\n        onCanPlay: this.onCanPlay,\n        onStalled: this.onStalled,\n        src: (source || {\n          uri: undefined\n        }).uri,\n        muted: status.isMuted,\n        loop: status.isLooping,\n        autoPlay: status.shouldPlay,\n        controls: useNativeControls,\n        style: [style, customStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }\n      });\n    }\n  }]);\n\n  return ExponentVideo;\n}(React.Component);\n\nexport { ExponentVideo as default };","map":{"version":3,"sources":["../src/ExponentVideo.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, createElement } from 'react-native';\n\nimport { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV';\nimport ExponentAV from './ExponentAV';\n\ntype ExponentVideoProps = {\n  source: AVPlaybackNativeSource | null;\n  resizeMode?: object;\n  status?: AVPlaybackStatusToSet;\n  useNativeControls?: boolean;\n  onStatusUpdate?: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onReadyForDisplay?: (event: { nativeEvent: object }) => void;\n  onFullscreenUpdate?: (event: { nativeEvent: object }) => void;\n  onLoadStart: () => void;\n  onLoad: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onError: (event: { nativeEvent: { error: string } }) => void;\n  // Required by react-native\n  scaleX?: number;\n  scaleY?: number;\n  translateX?: number;\n  translateY?: number;\n  rotation?: number;\n} & React.ComponentProps<typeof View>;\n\nexport type NaturalSize = {\n  width: number;\n  height: number;\n  orientation: 'portrait' | 'landscape';\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst Video: any = React.forwardRef((props, ref) => createElement('video', { ...props, ref }));\n\nexport default class ExponentVideo extends React.Component<ExponentVideoProps> {\n  _video?: HTMLVideoElement;\n\n  componentDidMount() {\n    const isIE11 = !!window['MSStream'];\n    document.addEventListener(\n      isIE11 ? 'MSFullscreenChange' : 'fullscreenchange',\n      this.onFullscreenChange\n    );\n  }\n\n  componentWillUnmount() {\n    const isIE11 = !!window['MSStream'];\n    document.addEventListener(\n      isIE11 ? 'MSFullscreenChange' : 'fullscreenchange',\n      this.onFullscreenChange\n    );\n  }\n\n  onFullscreenChange = event => {\n    if (!this.props.onFullscreenUpdate) return;\n\n    if (event.target === this._video) {\n      if (document.fullscreenElement) {\n        this.props.onFullscreenUpdate({\n          nativeEvent: { fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_PRESENT },\n        });\n      } else {\n        this.props.onFullscreenUpdate({\n          nativeEvent: { fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_DISMISS },\n        });\n      }\n    }\n  };\n\n  onStatusUpdate = async () => {\n    if (!this.props.onStatusUpdate) {\n      return;\n    }\n    const nativeEvent = await ExponentAV.getStatusForVideo(this._video);\n    this.props.onStatusUpdate({ nativeEvent });\n  };\n\n  onLoadStart = () => {\n    if (!this.props.onLoadStart) {\n      return;\n    }\n    this.props.onLoadStart();\n    this.onStatusUpdate();\n  };\n\n  onLoadedData = event => {\n    if (!this.props.onLoad) {\n      return;\n    }\n    this.props.onLoad(event);\n    this.onStatusUpdate();\n  };\n\n  onError = event => {\n    if (!this.props.onError) {\n      return;\n    }\n    this.props.onError(event);\n    this.onStatusUpdate();\n  };\n\n  onProgress = () => {\n    this.onStatusUpdate();\n  };\n\n  onSeeking = () => {\n    this.onStatusUpdate();\n  };\n\n  onEnded = () => {\n    this.onStatusUpdate();\n  };\n\n  onLoadedMetadata = () => {\n    this.onStatusUpdate();\n  };\n\n  onCanPlay = event => {\n    if (!this.props.onReadyForDisplay) {\n      return;\n    }\n    this.props.onReadyForDisplay(event);\n    this.onStatusUpdate();\n  };\n\n  onStalled = () => {\n    this.onStatusUpdate();\n  };\n\n  onRef = (ref: HTMLVideoElement) => {\n    this._video = ref;\n    this.onStatusUpdate();\n  };\n\n  render() {\n    const { source, status = {}, resizeMode: objectFit, useNativeControls, style } = this.props;\n\n    const customStyle = {\n      position: undefined,\n      objectFit,\n      overflow: 'hidden',\n    };\n    return (\n      <Video\n        ref={this.onRef}\n        onLoadStart={this.onLoadStart}\n        onLoadedData={this.onLoadedData}\n        onError={this.onError}\n        onTimeUpdate={this.onProgress}\n        onSeeking={this.onSeeking}\n        onEnded={this.onEnded}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onCanPlay={this.onCanPlay}\n        onStalled={this.onStalled}\n        src={(source || { uri: undefined }).uri}\n        muted={status.isMuted}\n        loop={status.isLooping}\n        autoPlay={status.shouldPlay}\n        controls={useNativeControls}\n        style={[style, customStyle]}\n      />\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}