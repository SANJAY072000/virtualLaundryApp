{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nexport default function getStateFromPath(path) {\n  var _ref;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var initialRoutes = [];\n\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(options).map(function (key) {\n    return createNormalizedConfigs(key, options, [], initialRoutes);\n  }))).sort(function (a, b) {\n    return b.pattern.split('/').length - a.pattern.split('/').length;\n  });\n\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) === null || _configs$find === void 0 ? void 0 : _configs$find.path);\n      });\n    });\n\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var result;\n  var current;\n\n  var _loop = function _loop() {\n    var routeNames = void 0;\n    var allParams = void 0;\n\n    var _loop3 = function _loop3(config) {\n      if (!config.regex) {\n        return \"continue\";\n      }\n\n      var match = remaining.match(config.regex);\n\n      if (match) {\n        routeNames = _toConsumableArray(config.routeNames);\n        var paramPatterns = config.pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        });\n\n        if (paramPatterns.length) {\n          allParams = paramPatterns.reduce(function (acc, p, i) {\n            var value = match[(i + 1) * 2].replace(/\\//, '');\n            acc[p] = value;\n            return acc;\n          }, {});\n        }\n\n        remaining = remaining.replace(match[1], '');\n        return \"break\";\n      }\n    };\n\n    _loop2: for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n      var config = _step.value;\n\n      var _ret = _loop3(config);\n\n      switch (_ret) {\n        case \"continue\":\n          continue;\n\n        case \"break\":\n          break _loop2;\n      }\n    }\n\n    if (routeNames === undefined) {\n      var segments = remaining.split('/');\n      routeNames = [decodeURIComponent(segments[0])];\n      segments.shift();\n      remaining = segments.join('/');\n    }\n\n    var state = createNestedStateObject(routeNames.map(function (name) {\n      var config = configs.find(function (c) {\n        return c.screen === name;\n      });\n      var params;\n\n      if (allParams && (config === null || config === void 0 ? void 0 : config.path)) {\n        var pattern = config.path;\n\n        if (pattern) {\n          var paramPatterns = pattern.split('/').filter(function (p) {\n            return p.startsWith(':');\n          });\n\n          if (paramPatterns.length) {\n            params = paramPatterns.reduce(function (acc, p) {\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              var value = allParams[p];\n\n              if (value) {\n                acc[key] = config.parse && config.parse[key] ? config.parse[key](value) : value;\n              }\n\n              return acc;\n            }, {});\n          }\n        }\n      }\n\n      if (params && Object.keys(params).length) {\n        return {\n          name: name,\n          params: params\n        };\n      }\n\n      return {\n        name: name\n      };\n    }), initialRoutes);\n\n    if (current) {\n      while ((_current = current) === null || _current === void 0 ? void 0 : _current.routes[current.index || 0].state) {\n        current = current.routes[current.index || 0].state;\n      }\n\n      current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n    } else {\n      result = state;\n    }\n\n    current = state;\n  };\n\n  while (remaining) {\n    var _current2;\n\n    var _current;\n\n    _loop();\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n\n  return result;\n}\n\nvar joinPaths = function joinPaths() {\n  var _ref2;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentPattern = arguments.length > 4 ? arguments[4] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  var config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern;\n\n    if (typeof config.path === 'string') {\n      _pattern = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens)\n        });\n      }\n\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, _pattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n\n    return \"\".concat(escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\n\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\nvar findInitialRoute = function findInitialRoute(routeName, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n    }\n  }\n\n  return undefined;\n};\n\nvar createStateObject = function createStateObject(initialRoute, routeName, params, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params: params\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params: params\n        }]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params: params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params: params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\n\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var initialRoute = findInitialRoute(route.name, initialRoutes);\n  state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n\n  if (routes.length > 0) {\n    var nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n    }\n  }\n\n  return state;\n};\n\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n\n  var current = state;\n\n  while ((_current3 = current) === null || _current3 === void 0 ? void 0 : _current3.routes[current.index || 0].state) {\n    var _current3;\n\n    current = current.routes[current.index || 0].state;\n  }\n\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\n\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["options","initialRoutes","configs","Object","key","createNormalizedConfigs","b","a","remaining","match","config","name","c","createNestedStateObject","i","self","params","parseQueryParams","routeNames","allParams","paramPatterns","p","value","acc","segments","decodeURIComponent","state","pattern","current","result","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","routeConfig","parentPattern","createConfigItem","initials","initialRouteName","connectedRoutes","nestedConfig","regex","it","escape","screen","path","parse","routeName","findInitialRoute","createStateObject","index","routes","initialRoute","nestedState","nestedStateIndex","query","queryString","parseConfig"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nimport {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport { PathConfig } from './types';\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  connectedRoutes: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * Example:\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     Chat: {\n *       path: 'chat/:author/:id',\n *       parse: { id: Number }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options: PathConfig = {}\n): ResultState | undefined {\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(options).map((key) =>\n        createNormalizedConfigs(key, options, [], initialRoutes)\n      )\n    )\n    .sort(\n      (a, b) =>\n        // Sort configs so the most exhaustive is always first to be chosen\n        b.pattern.split('/').length - a.pattern.split('/').length\n    );\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  while (remaining) {\n    let routeNames: string[] | undefined;\n    let allParams: Record<string, any> | undefined;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    for (const config of configs) {\n      if (!config.regex) {\n        continue;\n      }\n\n      const match = remaining.match(config.regex);\n\n      // If our regex matches, we need to extract params from the path\n      if (match) {\n        routeNames = [...config.routeNames];\n\n        const paramPatterns = config.pattern\n          .split('/')\n          .filter((p) => p.startsWith(':'));\n\n        if (paramPatterns.length) {\n          allParams = paramPatterns.reduce<Record<string, any>>((acc, p, i) => {\n            const value = match![(i + 1) * 2].replace(/\\//, ''); // The param segments appear every second item starting from 2 in the regex match result\n\n            acc[p] = value;\n\n            return acc;\n          }, {});\n        }\n\n        remaining = remaining.replace(match[1], '');\n\n        break;\n      }\n    }\n\n    // If we hadn't matched any segments earlier, use the path as route name\n    if (routeNames === undefined) {\n      const segments = remaining.split('/');\n\n      routeNames = [decodeURIComponent(segments[0])];\n      segments.shift();\n      remaining = segments.join('/');\n    }\n\n    const state = createNestedStateObject(\n      routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n\n        let params: object | undefined;\n\n        if (allParams && config?.path) {\n          const pattern = config.path;\n\n          if (pattern) {\n            const paramPatterns = pattern\n              .split('/')\n              .filter((p) => p.startsWith(':'));\n\n            if (paramPatterns.length) {\n              params = paramPatterns.reduce<Record<string, any>>((acc, p) => {\n                const key = p.replace(/^:/, '').replace(/\\?$/, '');\n                const value = allParams![p];\n\n                if (value) {\n                  acc[key] =\n                    config.parse && config.parse[key]\n                      ? config.parse[key](value)\n                      : value;\n                }\n\n                return acc;\n              }, {});\n            }\n          }\n        }\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      }),\n      initialRoutes\n    );\n\n    if (current) {\n      // The state should be nested inside the deepest route we parsed before\n      while (current?.routes[current.index || 0].state) {\n        current = current.routes[current.index || 0].state;\n      }\n\n      (current as PartialState<NavigationState>).routes[\n        current?.index || 0\n      ].state = state;\n    } else {\n      result = state;\n    }\n\n    current = state;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfig,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      pattern =\n        config.exact !== true && parentPattern\n          ? joinPaths(parentPattern, config.path)\n          : config.path;\n\n      configs.push(\n        createConfigItem(screen, routeNames, pattern, config.path, config.parse)\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens),\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfig,\n          routeNames,\n          initials,\n          pattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName\n        ? undefined\n        : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  routeName: string,\n  params: Record<string, any> | undefined,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { name: routeName as string, params }],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params }],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [\n          { name: initialRoute },\n          { name: routeName as string, params, state: { routes: [] } },\n        ],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: { name: string; params?: object }[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as { name: string; params?: object };\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\n\n  state = createStateObject(\n    initialRoute,\n    route.name,\n    route.params,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as { name: string; params?: object })) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route.name,\n        route.params,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}